name: API Gateway CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'api-gateway/**'
      - '.github/workflows/gateway.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'api-gateway/**'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.43.x

      - name: Cache Deno dependencies
        run: deno cache main.ts

      - name: Lint code
        run: deno lint

      - name: Format check
        run: deno fmt --check

      - name: Type check
        run: deno check main.ts

      - name: Run tests
        run: deno test --allow-net --allow-read --allow-env
        env:
          ANTRAGSGRUEN_BASE_URL: http://localhost:8080
          RARIMO_ISSUER: https://auth.rarimo.com
          JWT_AUDIENCE: antragsgruen-api-test

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api-gateway

    services:
      antragsgruen:
        image: antragsgruen/antragsgruen:latest
        ports:
          - 8080:80
        env:
          MYSQL_HOST: mysql
          MYSQL_DATABASE: antragsgruen
          MYSQL_USER: antragsgruen
          MYSQL_PASSWORD: antragsgruen
      
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: antragsgruen
          MYSQL_USER: antragsgruen
          MYSQL_PASSWORD: antragsgruen
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.43.x

      - name: Wait for services
        run: |
          # Wait for MySQL to be ready
          sleep 10
          # Wait for Antragsgr√ºn to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'

      - name: Cache Deno dependencies
        run: deno cache main.ts

      - name: Start API Gateway
        run: deno run --allow-net --allow-read --allow-env main.ts &
        env:
          PORT: 8000
          ANTRAGSGRUEN_BASE_URL: http://localhost:8080
          RARIMO_ISSUER: https://auth.rarimo.com
          JWT_AUDIENCE: antragsgruen-api-test

      - name: Wait for API Gateway
        run: timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run integration tests
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health
          
          # Test OpenAPI docs
          curl -f http://localhost:8000/api/docs
          
          # Test CORS headers
          curl -H "Origin: https://example.com" \
               -H "Access-Control-Request-Method: GET" \
               -H "Access-Control-Request-Headers: Authorization" \
               -X OPTIONS http://localhost:8000/rest

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api-gateway

    services:
      antragsgruen:
        image: antragsgruen/antragsgruen:latest
        ports:
          - 8080:80
        env:
          MYSQL_HOST: mysql
          MYSQL_DATABASE: antragsgruen
          MYSQL_USER: antragsgruen
          MYSQL_PASSWORD: antragsgruen
      
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: antragsgruen
          MYSQL_USER: antragsgruen
          MYSQL_PASSWORD: antragsgruen

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.43.x

      - name: Install hey (HTTP load testing tool)
        run: |
          wget https://hey-release.s3.us-east-2.amazonaws.com/hey_linux_amd64
          chmod +x hey_linux_amd64
          sudo mv hey_linux_amd64 /usr/local/bin/hey

      - name: Wait for services
        run: |
          sleep 10
          timeout 60 bash -c 'until curl -f http://localhost:8080/health; do sleep 5; done'

      - name: Cache Deno dependencies
        run: deno cache main.ts

      - name: Start API Gateway
        run: deno run --allow-net --allow-read --allow-env main.ts &
        env:
          PORT: 8000
          ANTRAGSGRUEN_BASE_URL: http://localhost:8080
          RARIMO_ISSUER: https://auth.rarimo.com
          JWT_AUDIENCE: antragsgruen-api-test

      - name: Wait for API Gateway
        run: timeout 30 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Run load test
        run: |
          # Test health endpoint under load
          hey -n 1000 -c 10 -t 5 http://localhost:8000/health
          
          # Check P99 latency requirement (should be < 15ms under 2000 RPS)
          echo "Load test completed. Check output for P99 latency."

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api-gateway

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.43.x

      - name: Security audit
        run: |
          # Check for known vulnerabilities in dependencies
          deno cache --reload main.ts
          
          # Run static analysis
          deno lint --rules-include=no-unused-vars,no-unreachable

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./api-gateway
          base: main
          head: HEAD

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, integration-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/api-gateway
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api-gateway
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [build-docker]
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying API Gateway to staging environment"
          # Add your deployment commands here
          # e.g., kubectl, docker-compose, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-docker, performance-test, security-scan]
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "Deploying API Gateway to production environment"
          # Add your deployment commands here
          # e.g., kubectl, docker-compose, etc.

      - name: Health check
        run: |
          # Wait for deployment and verify health
          sleep 30
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health

      - name: Performance validation
        run: |
          # Quick performance check after deployment
          curl -w "@curl-format.txt" -o /dev/null -s ${{ secrets.PRODUCTION_API_URL }}/health
