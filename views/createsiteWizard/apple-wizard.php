<?php

/**
 * Apple-Inspired Wizard with Farsi-First Design
 * Modern, accessible, and responsive wizard implementation
 * 
 * @var string[] $errors
 * @var string $mode
 * @var \app\models\forms\SiteCreateForm $model
 */

use yii\helpers\Html;

$isRTL = Yii::$app->language === 'fa';
$t = function ($string) {
    return Yii::t('wizard', $string);
};

// Get CSRF token for secure form submission
$csrfToken = Yii::$app->request->getCsrfToken();

?>

<!DOCTYPE html>
<html lang="<?= Yii::$app->language ?>" dir="<?= $isRTL ? 'rtl' : 'ltr' ?>">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<?= $csrfToken ?>">
    <title><?= $isRTL ? 'ŸÜÿµÿ® ÿßŸÜÿ™ÿ±ÿß⁄Øÿ≥⁄Øÿ±€åŸÜ - ÿ≥ÿ≠ÿ±ŸÜÿßŸÖŸá ÿ±ÿßŸáŸÜŸÖÿß' : 'Antragsgr√ºn Setup - Installation Wizard' ?></title>
    
    <!-- Apple-inspired favicon -->
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üèõÔ∏è</text></svg>">
    
    <!-- Preload fonts for better performance -->
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- CSS -->
    <link rel="stylesheet" href="<?= Yii::$app->request->baseUrl ?>/css/apple-wizard-farsi.css">
    
    <!-- Meta tags for better SEO and social sharing -->
    <meta name="description" content="<?= $isRTL ? 
        'ÿ±ÿßŸá‚ÄåÿßŸÜÿØÿßÿ≤€å ÿ¢ÿ≥ÿßŸÜ Ÿà ÿ≥ÿ±€åÿπ ŸæŸÑÿ™ŸÅÿ±ŸÖ ÿßŸÜÿ™ÿ±ÿß⁄Øÿ≥⁄Øÿ±€åŸÜ ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ⁄©ÿßŸÖŸÑ ÿßÿ≤ ÿ≤ÿ®ÿßŸÜ ŸÅÿßÿ±ÿ≥€å' :
        'Easy and fast setup of Antragsgr√ºn platform with complete Farsi language support' 
    ?>">
    <meta property="og:title" content="<?= $isRTL ? 'ŸÜÿµÿ® ÿßŸÜÿ™ÿ±ÿß⁄Øÿ≥⁄Øÿ±€åŸÜ' : 'Antragsgr√ºn Setup' ?>">
    <meta property="og:description" content="<?= $isRTL ? 
        'ŸæŸÑÿ™ŸÅÿ±ŸÖ ŸÖÿØÿ±ŸÜ ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ Ÿà ÿ™ÿµŸÖ€åŸÖ‚Äå⁄Ø€åÿ±€å ⁄Øÿ±ŸàŸá€å' :
        'Modern platform for proposal management and group decision making' 
    ?>">
    
    <!-- Accessibility improvements -->
    <meta name="theme-color" content="#007AFF">
    <meta name="color-scheme" content="light dark">
    
    <style>
        /* Critical CSS for initial render */
        body {
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', 'Helvetica Neue', Helvetica, Arial, sans-serif;
            background: #FAFAFA;
            line-height: 1.5;
        }
        
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #FAFAFA;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 9999;
            transition: opacity 0.3s ease;
        }
        
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #E5E5EA;
            border-top: 3px solid #007AFF;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Hide default Yii2 elements that we'll replace */
        .site-create,
        .antragsgruenInitForm,
        .wizardWidget,
        .form-horizontal {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Loading Screen -->
    <div class="loading-screen" id="loadingScreen">
        <div class="loading-spinner"></div>
    </div>

    <!-- Main Wizard Container -->
    <div id="AppleFarsiWizard" class="apple-wizard-container">
        <!-- Wizard content will be dynamically generated by JavaScript -->
    </div>

    <!-- Hidden form data for compatibility with existing backend -->
    <div style="display: none;" id="existingFormData">
        <?= Html::beginForm('', 'post', [
            'class' => 'siteCreate antragsgruenInitForm form-horizontal',
            'id' => 'compatibilityForm'
        ]); ?>
        
        <!-- Preserve existing form structure for data compatibility -->
        <?php
        // Functionality checkboxes
        foreach (['motions', 'manifesto', 'applications', 'agenda'] as $func) {
            echo Html::checkbox(
                'SiteCreateForm[functionality][]',
                in_array($func, $model->functionality ?? []),
                ['value' => $func, 'id' => "func_$func"]
            );
        }
        
        // Other form fields
        echo Html::textInput('SiteCreateForm[title]', $model->title ?? '', ['id' => 'site_title']);
        echo Html::textInput('SiteCreateForm[organization]', $model->organization ?? '', ['id' => 'site_organization']);
        echo Html::input('email', 'SiteCreateForm[contact]', $model->contact ?? '', ['id' => 'site_contact']);
        echo Html::dropDownList('SiteCreateForm[language]', $model->language ?? 'fa', [
            'fa' => 'ŸÅÿßÿ±ÿ≥€å (Persian)',
            'en' => 'English',
            'de' => 'Deutsch',
            'fr' => 'Fran√ßais'
        ], ['id' => 'site_language']);
        
        // Motion settings
        echo Html::radioList('SiteCreateForm[motionType]', $model->motionType ?? 'single', [
            'single' => $isRTL ? 'ÿ™⁄© ŸÖŸàÿ∂Ÿàÿπ€å' : 'Single Topic',
            'multiple' => $isRTL ? '⁄ÜŸÜÿØ ŸÖŸàÿ∂Ÿàÿπ€å' : 'Multiple Topics'
        ], ['id' => 'motion_type']);
        
        echo Html::input('datetime-local', 'SiteCreateForm[motionDeadline]', $model->motionDeadline ?? '', ['id' => 'motion_deadline']);
        
        // Amendment settings
        echo Html::radioList('SiteCreateForm[amendmentType]', $model->amendmentType ?? 'paragraph', [
            'global' => $isRTL ? '⁄©ŸÑ€å' : 'Global',
            'paragraph' => $isRTL ? 'Ÿæÿßÿ±ÿß⁄Øÿ±ÿßŸÅ€å' : 'Paragraph-based'
        ], ['id' => 'amendment_type']);
        
        echo Html::input('datetime-local', 'SiteCreateForm[amendmentDeadline]', $model->amendmentDeadline ?? '', ['id' => 'amendment_deadline']);
        
        // Special features
        foreach (['comments', 'speechLists', 'voting', 'supporters'] as $feature) {
            echo Html::checkbox(
                'SiteCreateForm[features][]',
                in_array($feature, $model->features ?? []),
                ['value' => $feature, 'id' => "feature_$feature"]
            );
        }
        ?>
        
        <?= Html::endForm(); ?>
    </div>

    <!-- Error handling for display -->
    <?php if (!empty($errors)): ?>
    <script>
        window.wizardErrors = <?= json_encode($errors) ?>;
    </script>
    <?php endif; ?>

    <!-- Configuration script -->
    <script>
        // Configuration object for the wizard
        window.wizardConfig = {
            mode: '<?= Html::encode($mode) ?>',
            language: '<?= Yii::$app->language ?>',
            isRTL: <?= $isRTL ? 'true' : 'false' ?>,
            csrfToken: '<?= $csrfToken ?>',
            baseUrl: '<?= Yii::$app->request->baseUrl ?>',
            translations: {
                // Core wizard translations
                title: <?= json_encode($t('title')) ?>,
                subtitle: <?= json_encode($t('subtitle')) ?>,
                
                // Step titles
                step_purpose: <?= json_encode($t('step_purpose')) ?>,
                step_motions: <?= json_encode($t('step_motions')) ?>,
                step_amendments: <?= json_encode($t('step_amendments')) ?>,
                step_special: <?= json_encode($t('step_special')) ?>,
                step_site: <?= json_encode($t('step_site')) ?>,
                
                // Navigation
                previous: <?= json_encode($t('previous')) ?>,
                next: <?= json_encode($t('next')) ?>,
                complete: <?= json_encode($t('complete')) ?>,
                
                // Functionality options
                functionality_motions: <?= json_encode($t('functionality_motions')) ?>,
                functionality_manifesto: <?= json_encode($t('functionality_manifesto')) ?>,
                functionality_applications: <?= json_encode($t('functionality_applications')) ?>,
                functionality_agenda: <?= json_encode($t('functionality_agenda')) ?>,
                
                // Form labels
                site_name: <?= json_encode($t('site_name')) ?>,
                organization: <?= json_encode($t('organization')) ?>,
                contact_email: <?= json_encode($t('contact_email')) ?>,
                default_language: <?= json_encode($t('default_language')) ?>,
                
                // Motion settings
                motion_type: <?= json_encode($t('motion_type')) ?>,
                motion_deadline: <?= json_encode($t('motion_deadline')) ?>,
                motion_screening: <?= json_encode($t('motion_screening')) ?>,
                
                // Amendment settings
                amendment_type: <?= json_encode($t('amendment_type')) ?>,
                amendment_deadline: <?= json_encode($t('amendment_deadline')) ?>,
                
                // Special features
                comments_system: <?= json_encode($t('comments_system')) ?>,
                speech_lists: <?= json_encode($t('speech_lists')) ?>,
                online_voting: <?= json_encode($t('online_voting')) ?>,
                supporter_system: <?= json_encode($t('supporter_system')) ?>,
                
                // Validation messages
                required_field: <?= json_encode($t('required_field')) ?>,
                invalid_email: <?= json_encode($t('invalid_email')) ?>,
                select_option: <?= json_encode($t('select_option')) ?>,
                
                // Success/error messages
                setup_complete: <?= json_encode($t('setup_complete')) ?>,
                setup_error: <?= json_encode($t('setup_error')) ?>,
                redirecting: <?= json_encode($t('redirecting')) ?>,
                completing: <?= json_encode($t('completing')) ?>
            },
            model: {
                functionality: <?= json_encode($model->functionality ?? []) ?>,
                title: <?= json_encode($model->title ?? '') ?>,
                organization: <?= json_encode($model->organization ?? '') ?>,
                contact: <?= json_encode($model->contact ?? '') ?>,
                language: <?= json_encode($model->language ?? 'fa') ?>,
                motionType: <?= json_encode($model->motionType ?? 'single') ?>,
                motionDeadline: <?= json_encode($model->motionDeadline ?? '') ?>,
                amendmentType: <?= json_encode($model->amendmentType ?? 'paragraph') ?>,
                amendmentDeadline: <?= json_encode($model->amendmentDeadline ?? '') ?>,
                features: <?= json_encode($model->features ?? []) ?>
            }
        };
    </script>

    <!-- Load the wizard JavaScript -->
    <script src="<?= Yii::$app->request->baseUrl ?>/js/apple-wizard-farsi.js"></script>
    
    <!-- Initialize wizard after page load -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Hide loading screen
            setTimeout(function() {
                const loadingScreen = document.getElementById('loadingScreen');
                if (loadingScreen) {
                    loadingScreen.style.opacity = '0';
                    setTimeout(() => loadingScreen.remove(), 300);
                }
            }, 500);
            
            // Initialize the Apple Farsi Wizard
            if (typeof AppleFarsiWizard !== 'undefined') {
                window.appleFarsiWizard = new AppleFarsiWizard('AppleFarsiWizard', {
                    rtl: wizardConfig.isRTL,
                    autoSave: true,
                    validateOnStep: true,
                    animationDuration: 250,
                    showProgress: true,
                    config: wizardConfig
                });
            }
        });
        
        // Handle browser back/forward navigation
        window.addEventListener('beforeunload', function(e) {
            if (window.appleFarsiWizard && window.appleFarsiWizard.getCurrentStep() > 0) {
                const message = wizardConfig.isRTL ? 
                    'ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿµŸÅÿ≠Ÿá ÿ±ÿß ÿ™ÿ±⁄© ⁄©ŸÜ€åÿØÿü ÿ™ÿ∫€å€åÿ±ÿßÿ™ ÿ∞ÿÆ€åÿ±Ÿá ŸÜÿ¥ÿØŸá ŸÖŸÖ⁄©ŸÜ ÿßÿ≥ÿ™ ÿßÿ≤ ÿ®€åŸÜ ÿ®ÿ±ŸàÿØ.' :
                    'Are you sure you want to leave this page? Unsaved changes may be lost.';
                e.preventDefault();
                e.returnValue = message;
                return message;
            }
        });
        
        // Add keyboard shortcuts for better accessibility
        document.addEventListener('keydown', function(e) {
            // Skip if typing in input field
            if (e.target.matches('input, textarea, select')) return;
            
            // Alt+1-5 for quick step navigation
            if (e.altKey && e.key >= '1' && e.key <= '5') {
                e.preventDefault();
                const stepIndex = parseInt(e.key) - 1;
                if (window.appleFarsiWizard) {
                    window.appleFarsiWizard.goToStep(stepIndex);
                }
            }
            
            // Escape to go to previous step
            if (e.key === 'Escape' && window.appleFarsiWizard) {
                e.preventDefault();
                window.appleFarsiWizard.previousStep();
            }
        });
        
        // Analytics and error tracking
        window.addEventListener('error', function(e) {
            console.error('Wizard error:', e.error);
            // Send to analytics if available
            if (typeof gtag !== 'undefined') {
                gtag('event', 'exception', {
                    description: e.error.toString(),
                    fatal: false
                });
            }
        });
        
        // Performance monitoring
        window.addEventListener('load', function() {
            if ('performance' in window) {
                const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
                console.log('Wizard load time:', loadTime + 'ms');
            }
        });
        
        // Accessibility announcements for screen readers
        if ('speechSynthesis' in window && wizardConfig.isRTL) {
            const announceInFarsi = (text) => {
                if (window.speechSynthesis.speaking) return;
                const utterance = new SpeechSynthesisUtterance(text);
                utterance.lang = 'fa-IR';
                utterance.rate = 0.9;
                utterance.pitch = 1;
                window.speechSynthesis.speak(utterance);
            };
            
            // Make announcement function globally available
            window.announceInFarsi = announceInFarsi;
        }
    </script>
    
    <!-- Structured data for SEO -->
    <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "SoftwareApplication",
        "name": "<?= $isRTL ? 'ÿßŸÜÿ™ÿ±ÿß⁄Øÿ≥⁄Øÿ±€åŸÜ - ÿ≥ÿßŸÖÿßŸÜŸá ŸÖÿØ€åÿ±€åÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™' : 'Antragsgr√ºn - Proposal Management System' ?>",
        "description": "<?= $isRTL ? 
            'ŸæŸÑÿ™ŸÅÿ±ŸÖ ŸÖÿØÿ±ŸÜ ÿ®ÿ±ÿß€å ŸÖÿØ€åÿ±€åÿ™ Ÿæ€åÿ¥ŸÜŸáÿßÿØÿßÿ™ÿå ÿßÿµŸÑÿßÿ≠€åŸá‚ÄåŸáÿß Ÿà ÿ™ÿµŸÖ€åŸÖ‚Äå⁄Ø€åÿ±€å ⁄Øÿ±ŸàŸá€å ÿ®ÿß Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ⁄©ÿßŸÖŸÑ ÿßÿ≤ ÿ≤ÿ®ÿßŸÜ ŸÅÿßÿ±ÿ≥€å' :
            'Modern platform for managing proposals, amendments and group decision making with complete Farsi language support' 
        ?>",
        "applicationCategory": "BusinessApplication",
        "operatingSystem": "Web",
        "url": "<?= Yii::$app->request->absoluteUrl ?>",
        "author": {
            "@type": "Organization",
            "name": "Antragsgr√ºn Team"
        },
        "inLanguage": ["fa", "en", "de", "fr"],
        "accessibility": "WCAG2.1AA",
        "applicationSubCategory": "Collaboration"
    }
    </script>

    <!-- Preload critical resources -->
    <link rel="preload" href="<?= Yii::$app->request->baseUrl ?>/js/apple-wizard-farsi.js" as="script">
    <link rel="preload" href="<?= Yii::$app->request->baseUrl ?>/css/apple-wizard-farsi.css" as="style">
    
    <!-- Service Worker for offline capability (if needed) -->
    <script>
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                // Register service worker if available
                // navigator.serviceWorker.register('/sw.js');
            });
        }
    </script>
</body>
</html>
